{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport httpRequest from \"../httpConfig\";\nimport { GET_ERROR_MESSAGE_SUCCEED, SEND_USER_PASSWORD } from \"../../redux/constants\";\n\nfunction* sendEmailWorker(action) {\n  const httpConfig = {\n    method: 'POST',\n    url: 'Api/User/Api/User/SendEmail',\n    data: {\n      EmailAddress: action.payload\n    }\n  };\n\n  try {\n    const response = yield call(() => httpRequest(httpConfig));\n\n    if (response.status === 200) {}\n  } catch (e) {\n    var _error$response;\n\n    const error = e;\n    yield put({\n      type: GET_ERROR_MESSAGE_SUCCEED,\n      payload: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data\n    });\n  }\n}\n\nexport function* watchSendEmail() {\n  yield takeEvery(SEND_USER_PASSWORD, sendEmailWorker);\n}","map":{"version":3,"sources":["C:/Users/Vladislav Avanesov/RiderProjects/TodoListWebApp/src/TodoListWebApp/ClientApp/src/sagas/UserSagas/SendPasswordToEmail.ts"],"names":["call","put","takeEvery","httpRequest","GET_ERROR_MESSAGE_SUCCEED","SEND_USER_PASSWORD","sendEmailWorker","action","httpConfig","method","url","data","EmailAddress","payload","response","status","e","error","type","watchSendEmail"],"mappings":"AAEA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,SAAnB,QAAmC,oBAAnC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,yBAAR,EAAmCC,kBAAnC,QAA4D,uBAA5D;;AAEA,UAAUC,eAAV,CAA0BC,MAA1B,EAAoD;AAEhD,QAAMC,UAA8B,GAAG;AACnCC,IAAAA,MAAM,EAAE,MAD2B;AAEnCC,IAAAA,GAAG,EAAE,6BAF8B;AAGnCC,IAAAA,IAAI,EAAE;AACFC,MAAAA,YAAY,EAAEL,MAAM,CAACM;AADnB;AAH6B,GAAvC;;AAQA,MAAI;AACA,UAAMC,QAAuB,GAAG,MAAMd,IAAI,CAAC,MAAMG,WAAW,CAACK,UAAD,CAAlB,CAA1C;;AACA,QAAGM,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA2B,CAE1B;AACJ,GALD,CAKE,OAAOC,CAAP,EAAU;AAAA;;AAER,UAAMC,KAAK,GAAGD,CAAd;AACA,UAAMf,GAAG,CAAC;AAACiB,MAAAA,IAAI,EAAEd,yBAAP;AAAkCS,MAAAA,OAAO,qBAAEI,KAAK,CAACH,QAAR,oDAAE,gBAAgBH;AAA3D,KAAD,CAAT;AACH;AACJ;;AAED,OAAO,UAAUQ,cAAV,GAA2B;AAC9B,QAAMjB,SAAS,CAACG,kBAAD,EAAqBC,eAArB,CAAf;AACH","sourcesContent":["import {SendUserPassword} from \"../../redux/action\";\r\nimport {AxiosError, AxiosRequestConfig, AxiosResponse} from \"axios\";\r\nimport {call, put, takeEvery} from \"redux-saga/effects\";\r\nimport httpRequest from \"../httpConfig\";\r\nimport {GET_ERROR_MESSAGE_SUCCEED, SEND_USER_PASSWORD} from \"../../redux/constants\";\r\n\r\nfunction* sendEmailWorker(action: SendUserPassword) {\r\n    \r\n    const httpConfig: AxiosRequestConfig = {\r\n        method: 'POST',\r\n        url: 'Api/User/Api/User/SendEmail',\r\n        data: {\r\n            EmailAddress: action.payload,\r\n        },\r\n    }\r\n    \r\n    try {\r\n        const response: AxiosResponse = yield call(() => httpRequest(httpConfig));\r\n        if(response.status === 200){\r\n            \r\n        }\r\n    } catch (e) {\r\n    \r\n        const error = e as AxiosError\r\n        yield put({type: GET_ERROR_MESSAGE_SUCCEED, payload: error.response?.data})\r\n    }\r\n}\r\n\r\nexport function* watchSendEmail() {\r\n    yield takeEvery(SEND_USER_PASSWORD, sendEmailWorker)\r\n}"]},"metadata":{},"sourceType":"module"}