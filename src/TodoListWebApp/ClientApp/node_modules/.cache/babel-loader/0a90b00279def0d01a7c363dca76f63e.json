{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { AUTHORIZATION, AUTHORIZATION_SUCCEED, GET_ERROR_MESSAGE_SUCCEED, LOADING } from \"../redux/constants\";\nimport httpRequest from \"./httpConfig\";\nimport jwt_decode from \"jwt-decode\";\nimport history from '../components/history';\n\nfunction* authorizationWorker(action) {\n  yield put({\n    type: LOADING,\n    payload: true\n  });\n  const httpConfig = {\n    method: 'POST',\n    url: 'authorization',\n    data: action.payload\n  };\n\n  try {\n    const response = yield call(() => httpRequest(httpConfig));\n    const jwt = Object.values(jwt_decode(response.data));\n    const profile = JSON.parse(jwt[1]);\n    localStorage.setItem('token', response.data);\n    yield put({\n      type: AUTHORIZATION_SUCCEED,\n      payload: {\n        token: response.data,\n        role: profile.Role,\n        name: profile.FirstName,\n        photo: '',\n        id: profile.Id\n      }\n    });\n\n    if (profile.Role === \"user\") {\n      history.push(\"/todoList\");\n    } else if (profile.Role === \"admin\") {\n      history.push(\"/admin\");\n    }\n  } catch (e) {\n    var _error$response;\n\n    const error = e;\n    yield put({\n      type: GET_ERROR_MESSAGE_SUCCEED,\n      payload: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.errorText\n    });\n  }\n\n  yield put({\n    type: LOADING,\n    payload: false\n  });\n}\n\nexport function* watchAuthorization() {\n  yield takeEvery(AUTHORIZATION, authorizationWorker);\n}","map":{"version":3,"sources":["C:/Users/Vladislav Avanesov/RiderProjects/TodoListWebApp/src/TodoListWebApp/ClientApp/src/sagas/Authorization.ts"],"names":["call","put","takeEvery","AUTHORIZATION","AUTHORIZATION_SUCCEED","GET_ERROR_MESSAGE_SUCCEED","LOADING","httpRequest","jwt_decode","history","authorizationWorker","action","type","payload","httpConfig","method","url","data","response","jwt","Object","values","profile","JSON","parse","localStorage","setItem","token","role","Role","name","FirstName","photo","id","Id","push","e","error","errorText","watchAuthorization"],"mappings":"AACA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,SAAnB,QAAmC,oBAAnC;AAEA,SACIC,aADJ,EAEIC,qBAFJ,EAE2BC,yBAF3B,EAGIC,OAHJ,QAIO,oBAJP;AAKA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,OAAP,MAAoB,uBAApB;;AAGA,UAAUC,mBAAV,CAA8BC,MAA9B,EAA2D;AAEvD,QAAMV,GAAG,CAAC;AAACW,IAAAA,IAAI,EAAEN,OAAP;AAAgBO,IAAAA,OAAO,EAAE;AAAzB,GAAD,CAAT;AACA,QAAMC,UAA8B,GAAG;AACnCC,IAAAA,MAAM,EAAE,MAD2B;AAEnCC,IAAAA,GAAG,EAAE,eAF8B;AAGnCC,IAAAA,IAAI,EAAEN,MAAM,CAACE;AAHsB,GAAvC;;AAMA,MAAI;AACA,UAAMK,QAAsB,GAAE,MAAMlB,IAAI,CAAC,MAAMO,WAAW,CAACO,UAAD,CAAlB,CAAxC;AACA,UAAMK,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcb,UAAU,CAAmBU,QAAQ,CAACD,IAA5B,CAAxB,CAAZ;AAEA,UAAMK,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,GAAG,CAAC,CAAD,CAAd,CAAhB;AACAM,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BR,QAAQ,CAACD,IAAvC;AAEA,UAAMhB,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAER,qBADA;AACuBS,MAAAA,OAAO,EAAE;AAClCc,QAAAA,KAAK,EAAET,QAAQ,CAACD,IADkB;AAElCW,QAAAA,IAAI,EAAEN,OAAO,CAACO,IAFoB;AAGlCC,QAAAA,IAAI,EAAER,OAAO,CAACS,SAHoB;AAIlCC,QAAAA,KAAK,EAAE,EAJ2B;AAKlCC,QAAAA,EAAE,EAAEX,OAAO,CAACY;AALsB;AADhC,KAAD,CAAT;;AAUA,QAAIZ,OAAO,CAACO,IAAR,KAAiB,MAArB,EAA6B;AACzBpB,MAAAA,OAAO,CAAC0B,IAAR,CAAa,WAAb;AACH,KAFD,MAEO,IAAIb,OAAO,CAACO,IAAR,KAAiB,OAArB,EAA8B;AACjCpB,MAAAA,OAAO,CAAC0B,IAAR,CAAa,QAAb;AACH;AAEJ,GAvBD,CAuBE,OAAOC,CAAP,EAAU;AAAA;;AAER,UAAMC,KAAK,GAAGD,CAAd;AACA,UAAMnC,GAAG,CAAC;AAACW,MAAAA,IAAI,EAAEP,yBAAP;AAAkCQ,MAAAA,OAAO,qBAAEwB,KAAK,CAACnB,QAAR,oDAAE,gBAAgBD,IAAhB,CAAqBqB;AAAhE,KAAD,CAAT;AACH;;AAED,QAAMrC,GAAG,CAAC;AAACW,IAAAA,IAAI,EAAEN,OAAP;AAAgBO,IAAAA,OAAO,EAAE;AAAzB,GAAD,CAAT;AACH;;AAED,OAAO,UAAU0B,kBAAV,GAA+B;AAClC,QAAMrC,SAAS,CAACC,aAAD,EAAgBO,mBAAhB,CAAf;AACH","sourcesContent":["import {AuthorizationAction} from \"../redux/action\";\r\nimport {call, put, takeEvery} from \"redux-saga/effects\";\r\nimport {AxiosError, AxiosRequestConfig, AxiosResponse} from \"axios\";\r\nimport {\r\n    AUTHORIZATION,\r\n    AUTHORIZATION_SUCCEED, GET_ERROR_MESSAGE_SUCCEED,\r\n    LOADING\r\n} from \"../redux/constants\";\r\nimport httpRequest from \"./httpConfig\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {CustomJwtPayload} from \"../redux/auth-reducer\";\r\nimport history from '../components/history'\r\n\r\n\r\nfunction* authorizationWorker(action: AuthorizationAction) {\r\n\r\n    yield put({type: LOADING, payload: true})\r\n    const httpConfig: AxiosRequestConfig = {\r\n        method: 'POST',\r\n        url: 'authorization',\r\n        data: action.payload\r\n    }\r\n\r\n    try {\r\n        const response:AxiosResponse= yield call(() => httpRequest(httpConfig));\r\n        const jwt = Object.values(jwt_decode<CustomJwtPayload>(response.data))\r\n\r\n        const profile = JSON.parse(jwt[1])\r\n        localStorage.setItem('token', response.data)\r\n\r\n        yield put({\r\n            type: AUTHORIZATION_SUCCEED, payload: {\r\n                token: response.data,\r\n                role: profile.Role,\r\n                name: profile.FirstName,\r\n                photo: '',\r\n                id: profile.Id\r\n            }\r\n        })\r\n\r\n        if (profile.Role === \"user\") {\r\n            history.push(\"/todoList\");\r\n        } else if (profile.Role === \"admin\") {\r\n            history.push(\"/admin\");\r\n        }\r\n\r\n    } catch (e) {\r\n\r\n        const error = e as AxiosError\r\n        yield put({type: GET_ERROR_MESSAGE_SUCCEED, payload: error.response?.data.errorText})\r\n    }\r\n\r\n    yield put({type: LOADING, payload: false})\r\n}\r\n\r\nexport function* watchAuthorization() {\r\n    yield takeEvery(AUTHORIZATION, authorizationWorker)\r\n}"]},"metadata":{},"sourceType":"module"}