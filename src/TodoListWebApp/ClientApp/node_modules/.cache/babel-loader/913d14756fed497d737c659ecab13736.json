{"ast":null,"code":"import { AUTHORIZATION_SUCCEED, EDIT_USER_PHOTO, GET_USER_PHOTO, GET_USER_PHOTO_SUCCEED, LOG_OUT, REGISTRATION, SEND_USER_PASSWORD } from \"./constants\";\nimport jwt_decode from \"jwt-decode\";\n\nconst getAuthState = () => {\n  const token = localStorage.getItem('token');\n  let role = null;\n  let name = '';\n  let photo = '';\n  let id = 0;\n\n  if (token) {\n    const jwt = Object.values(jwt_decode(token));\n    const profile = JSON.parse(jwt[1]);\n    role = profile.Role || null;\n    name = profile.FirstName || null;\n    photo = profile.Photo || \"\";\n    id = profile.Id;\n  }\n\n  return {\n    token,\n    role,\n    name,\n    photo,\n    id\n  };\n};\n\nconst initialState = getAuthState();\n\nconst auth = (state = initialState, action) => {\n  switch (action.type) {\n    case REGISTRATION:\n      return action.payload;\n\n    case AUTHORIZATION_SUCCEED:\n      return {\n        token: action.payload.token,\n        role: action.payload.role,\n        name: action.payload.name,\n        id: action.payload.id,\n        photo: action.payload.photo\n      };\n\n    case LOG_OUT:\n      return {\n        token: action.payload,\n        role: action.payload,\n        name: action.payload\n      };\n\n    case EDIT_USER_PHOTO:\n      return { ...state,\n        photo: action.payload.photo,\n        id: action.payload.id\n      };\n\n    case GET_USER_PHOTO:\n      return { ...state,\n        photo: action.payload\n      };\n\n    case GET_USER_PHOTO_SUCCEED:\n      return { ...state,\n        photo: action.payload\n      };\n\n    case SEND_USER_PASSWORD:\n      return { ...state,\n        email: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default auth;","map":{"version":3,"sources":["C:/Users/Vladislav Avanesov/RiderProjects/TodoListWebApp/src/TodoListWebApp/ClientApp/src/redux/auth-reducer.ts"],"names":["AUTHORIZATION_SUCCEED","EDIT_USER_PHOTO","GET_USER_PHOTO","GET_USER_PHOTO_SUCCEED","LOG_OUT","REGISTRATION","SEND_USER_PASSWORD","jwt_decode","getAuthState","token","localStorage","getItem","role","name","photo","id","jwt","Object","values","profile","JSON","parse","Role","FirstName","Photo","Id","initialState","auth","state","action","type","payload","email"],"mappings":"AAEA,SACIA,qBADJ,EAEIC,eAFJ,EAGIC,cAHJ,EAIIC,sBAJJ,EAKIC,OALJ,EAMIC,YANJ,EAMkBC,kBANlB,QAOO,aAPP;AAQA,OAAOC,UAAP,MAAqC,YAArC;;AAOA,MAAMC,YAAY,GAAG,MAAY;AAC7B,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,MAAIC,IAAiB,GAAG,IAAxB;AACA,MAAIC,IAAmB,GAAG,EAA1B;AACA,MAAIC,KAAa,GAAG,EAApB;AACA,MAAIC,EAAU,GAAG,CAAjB;;AAEA,MAAIN,KAAJ,EAAW;AACP,UAAMO,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcX,UAAU,CAAmBE,KAAnB,CAAxB,CAAZ;AACA,UAAMU,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,GAAG,CAAC,CAAD,CAAd,CAAhB;AACAJ,IAAAA,IAAI,GAAGO,OAAO,CAACG,IAAR,IAAgB,IAAvB;AACAT,IAAAA,IAAI,GAAGM,OAAO,CAACI,SAAR,IAAqB,IAA5B;AACAT,IAAAA,KAAK,GAAGK,OAAO,CAACK,KAAR,IAAiB,EAAzB;AACAT,IAAAA,EAAE,GAAGI,OAAO,CAACM,EAAb;AACH;;AACD,SAAO;AACHhB,IAAAA,KADG;AAEHG,IAAAA,IAFG;AAGHC,IAAAA,IAHG;AAIHC,IAAAA,KAJG;AAKHC,IAAAA;AALG,GAAP;AAQH,CAvBD;;AAyBA,MAAMW,YAAkB,GAAGlB,YAAY,EAAvC;;AAEA,MAAMmB,IAAI,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAoD;AAE7D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKzB,YAAL;AACI,aAAOwB,MAAM,CAACE,OAAd;;AAEJ,SAAK/B,qBAAL;AACI,aAAO;AACHS,QAAAA,KAAK,EAAEoB,MAAM,CAACE,OAAP,CAAetB,KADnB;AAEHG,QAAAA,IAAI,EAAEiB,MAAM,CAACE,OAAP,CAAenB,IAFlB;AAGHC,QAAAA,IAAI,EAAEgB,MAAM,CAACE,OAAP,CAAelB,IAHlB;AAIHE,QAAAA,EAAE,EAAEc,MAAM,CAACE,OAAP,CAAehB,EAJhB;AAKHD,QAAAA,KAAK,EAAEe,MAAM,CAACE,OAAP,CAAejB;AALnB,OAAP;;AAQJ,SAAKV,OAAL;AACI,aAAO;AAACK,QAAAA,KAAK,EAAEoB,MAAM,CAACE,OAAf;AAAwBnB,QAAAA,IAAI,EAAEiB,MAAM,CAACE,OAArC;AAA8ClB,QAAAA,IAAI,EAAEgB,MAAM,CAACE;AAA3D,OAAP;;AAEJ,SAAK9B,eAAL;AACI,aAAO,EAAC,GAAG2B,KAAJ;AAAWd,QAAAA,KAAK,EAAEe,MAAM,CAACE,OAAP,CAAejB,KAAjC;AAAwCC,QAAAA,EAAE,EAAEc,MAAM,CAACE,OAAP,CAAehB;AAA3D,OAAP;;AAEJ,SAAKb,cAAL;AACI,aAAO,EAAC,GAAG0B,KAAJ;AAAWd,QAAAA,KAAK,EAAEe,MAAM,CAACE;AAAzB,OAAP;;AAEJ,SAAK5B,sBAAL;AACI,aAAO,EAAC,GAAGyB,KAAJ;AAAWd,QAAAA,KAAK,EAAEe,MAAM,CAACE;AAAzB,OAAP;;AAEJ,SAAKzB,kBAAL;AACI,aAAO,EAAC,GAAGsB,KAAJ;AAAWI,QAAAA,KAAK,EAAEH,MAAM,CAACE;AAAzB,OAAP;;AAEJ;AACI,aAAOH,KAAP;AA7BR;AA+BH,CAjCD;;AAmCA,eAAeD,IAAf","sourcesContent":["import {Auth, Role} from \"../Components/Interfaces\";\r\nimport {TodosActionTypes} from \"./action\";\r\nimport {\r\n    AUTHORIZATION_SUCCEED,\r\n    EDIT_USER_PHOTO,\r\n    GET_USER_PHOTO,\r\n    GET_USER_PHOTO_SUCCEED,\r\n    LOG_OUT,\r\n    REGISTRATION, SEND_USER_PASSWORD\r\n} from \"./constants\";\r\nimport jwt_decode, {JwtPayload} from \"jwt-decode\";\r\n\r\nexport interface CustomJwtPayload extends JwtPayload {\r\n    role: Role | null;\r\n    name: string | null\r\n}\r\n\r\nconst getAuthState = (): Auth => {\r\n    const token = localStorage.getItem('token')!\r\n    let role: Role | null = null\r\n    let name: string | null = ''\r\n    let photo: string = ''\r\n    let id: number = 0\r\n\r\n    if (token) {\r\n        const jwt = Object.values(jwt_decode<CustomJwtPayload>(token))\r\n        const profile = JSON.parse(jwt[1])\r\n        role = profile.Role || null\r\n        name = profile.FirstName || null\r\n        photo = profile.Photo || \"\"\r\n        id = profile.Id\r\n    }\r\n    return {\r\n        token,\r\n        role,\r\n        name,\r\n        photo,\r\n        id,\r\n    }\r\n\r\n}\r\n\r\nconst initialState: Auth = getAuthState();\r\n\r\nconst auth = (state = initialState, action: TodosActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case REGISTRATION:\r\n            return action.payload\r\n\r\n        case AUTHORIZATION_SUCCEED:\r\n            return {\r\n                token: action.payload.token,\r\n                role: action.payload.role,\r\n                name: action.payload.name,\r\n                id: action.payload.id,\r\n                photo: action.payload.photo\r\n            }\r\n\r\n        case LOG_OUT:\r\n            return {token: action.payload, role: action.payload, name: action.payload}\r\n\r\n        case EDIT_USER_PHOTO:\r\n            return {...state, photo: action.payload.photo, id: action.payload.id}\r\n\r\n        case GET_USER_PHOTO:\r\n            return {...state, photo: action.payload}\r\n\r\n        case GET_USER_PHOTO_SUCCEED:\r\n            return {...state, photo: action.payload}\r\n            \r\n        case SEND_USER_PASSWORD:\r\n            return {...state, email: action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default auth"]},"metadata":{},"sourceType":"module"}