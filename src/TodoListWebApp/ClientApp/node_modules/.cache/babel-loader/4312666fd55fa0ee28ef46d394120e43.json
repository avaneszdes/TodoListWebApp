{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { GET_ERROR_MESSAGE_SUCCEED, REGISTRATION, REGISTRATION_SUCCEED } from \"../redux/constants\";\nimport httpRequest from \"./httpConfig\";\nimport history from \"../components/history\";\n\nfunction* registrationWorker(action) {\n  const httpConfig = {\n    method: 'POST',\n    url: 'api/registration/',\n    data: action.payload\n  };\n\n  try {\n    const response = yield call(() => httpRequest(httpConfig));\n    yield put({\n      type: REGISTRATION_SUCCEED,\n      payload: action.payload\n    });\n    history.push(\"/\");\n  } catch (e) {\n    var _error$response;\n\n    const error = e;\n    yield put({\n      type: GET_ERROR_MESSAGE_SUCCEED,\n      payload: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data\n    });\n  }\n}\n\nexport function* watchRegistration() {\n  yield takeEvery(REGISTRATION, registrationWorker);\n}","map":{"version":3,"sources":["C:/Users/Vladislav Avanesov/RiderProjects/TodoListWebApp/src/TodoListWebApp/ClientApp/src/sagas/Registration.ts"],"names":["call","put","takeEvery","GET_ERROR_MESSAGE_SUCCEED","REGISTRATION","REGISTRATION_SUCCEED","httpRequest","history","registrationWorker","action","httpConfig","method","url","data","payload","response","type","push","e","error","watchRegistration"],"mappings":"AAEA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,SAAnB,QAAmC,oBAAnC;AACA,SAAQC,yBAAR,EAAmCC,YAAnC,EAAiDC,oBAAjD,QAA4E,oBAA5E;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAGA,UAAUC,kBAAV,CAA6BC,MAA7B,EAAyD;AACrD,QAAMC,UAA8B,GAAG;AACnCC,IAAAA,MAAM,EAAE,MAD2B;AAEnCC,IAAAA,GAAG,EAAE,mBAF8B;AAGnCC,IAAAA,IAAI,EAAEJ,MAAM,CAACK;AAHsB,GAAvC;;AAKA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMf,IAAI,CAAC,MAAMM,WAAW,CAACI,UAAD,CAAlB,CAA3B;AACA,UAAMT,GAAG,CAAC;AAACe,MAAAA,IAAI,EAAEX,oBAAP;AAA6BS,MAAAA,OAAO,EAAEL,MAAM,CAACK;AAA7C,KAAD,CAAT;AACAP,IAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AAEH,GALD,CAKE,OAAOC,CAAP,EAAU;AAAA;;AACR,UAAMC,KAAK,GAAGD,CAAd;AACA,UAAMjB,GAAG,CAAC;AAACe,MAAAA,IAAI,EAAEb,yBAAP;AAAkCW,MAAAA,OAAO,qBAAEK,KAAK,CAACJ,QAAR,oDAAE,gBAAgBF;AAA3D,KAAD,CAAT;AACH;AACJ;;AAED,OAAO,UAAUO,iBAAV,GAA8B;AACjC,QAAMlB,SAAS,CAACE,YAAD,EAAeI,kBAAf,CAAf;AACH","sourcesContent":["import {AxiosError, AxiosRequestConfig} from \"axios\";\r\nimport {RegistrationAction} from \"../redux/action\";\r\nimport {call, put, takeEvery} from \"redux-saga/effects\";\r\nimport {GET_ERROR_MESSAGE_SUCCEED, REGISTRATION, REGISTRATION_SUCCEED} from \"../redux/constants\";\r\nimport httpRequest from \"./httpConfig\";\r\nimport history from \"../components/history\";\r\n\r\n\r\nfunction* registrationWorker(action: RegistrationAction) {\r\n    const httpConfig: AxiosRequestConfig = {\r\n        method: 'POST',\r\n        url: 'api/registration/',\r\n        data: action.payload\r\n    }\r\n    try {\r\n        const response = yield call(() => httpRequest(httpConfig));\r\n        yield put({type: REGISTRATION_SUCCEED, payload: action.payload})\r\n        history.push(\"/\");\r\n\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        yield put({type: GET_ERROR_MESSAGE_SUCCEED, payload: error.response?.data})\r\n    }\r\n}\r\n\r\nexport function* watchRegistration() {\r\n    yield takeEvery(REGISTRATION, registrationWorker)\r\n} "]},"metadata":{},"sourceType":"module"}