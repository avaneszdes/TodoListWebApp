{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport httpRequest from \"../httpConfig\";\nimport { EDIT_USER_PHOTO, EDIT_USER_PHOTO_SUCCEED } from \"../../redux/constants\";\n\nfunction* updateUserPhotoWorker(action) {\n  const httpConfig = {\n    method: 'PUT',\n    url: '/api/user',\n    data: action.payload\n  };\n  const response = yield call(() => httpRequest(httpConfig));\n\n  if (response.status === 200) {\n    yield put({\n      type: EDIT_USER_PHOTO_SUCCEED,\n      payload: action.payload\n    });\n  }\n}\n\nexport function* watchUpdateUserPhoto() {\n  yield takeEvery(EDIT_USER_PHOTO, updateUserPhotoWorker);\n}","map":{"version":3,"sources":["C:/Users/Vladislav Avanesov/RiderProjects/TodoListWebApp/src/TodoListWebApp/ClientApp/src/sagas/UserSagas/UpdateUserPhoto.ts"],"names":["call","put","takeEvery","httpRequest","EDIT_USER_PHOTO","EDIT_USER_PHOTO_SUCCEED","updateUserPhotoWorker","action","httpConfig","method","url","data","payload","response","status","type","watchUpdateUserPhoto"],"mappings":"AAEA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,SAAnB,QAAmC,oBAAnC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,eAAR,EAAyBC,uBAAzB,QAAuD,uBAAvD;;AAEA,UAAUC,qBAAV,CAAgCC,MAAhC,EAA6D;AACzD,QAAMC,UAA8B,GAAG;AACnCC,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,GAAG,EAAE,WAF8B;AAGnCC,IAAAA,IAAI,EAAEJ,MAAM,CAACK;AAHsB,GAAvC;AAMA,QAAMC,QAAuB,GAAG,MAAMb,IAAI,CAAC,MAAMG,WAAW,CAACK,UAAD,CAAlB,CAA1C;;AACA,MAAGK,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA2B;AACvB,UAAMb,GAAG,CAAC;AAACc,MAAAA,IAAI,EAAEV,uBAAP;AAAgCO,MAAAA,OAAO,EAAEL,MAAM,CAACK;AAAhD,KAAD,CAAT;AACH;AACJ;;AAED,OAAO,UAAUI,oBAAV,GAAgC;AACnC,QAAMd,SAAS,CAACE,eAAD,EAAkBE,qBAAlB,CAAf;AACH","sourcesContent":["import {EditUserPhotoSucceed} from \"../../redux/action\";\r\nimport {AxiosRequestConfig, AxiosResponse} from \"axios\";\r\nimport {call, put, takeEvery} from \"redux-saga/effects\";\r\nimport httpRequest from \"../httpConfig\";\r\nimport {EDIT_USER_PHOTO, EDIT_USER_PHOTO_SUCCEED} from \"../../redux/constants\";\r\n\r\nfunction* updateUserPhotoWorker(action: EditUserPhotoSucceed){\r\n    const httpConfig: AxiosRequestConfig = {\r\n        method: 'PUT',\r\n        url: '/api/user',\r\n        data: action.payload\r\n    }\r\n\r\n    const response: AxiosResponse = yield call(() => httpRequest(httpConfig));\r\n    if(response.status === 200){\r\n        yield put({type: EDIT_USER_PHOTO_SUCCEED, payload: action.payload})\r\n    }\r\n}\r\n\r\nexport function* watchUpdateUserPhoto(){\r\n    yield takeEvery(EDIT_USER_PHOTO, updateUserPhotoWorker)\r\n}"]},"metadata":{},"sourceType":"module"}