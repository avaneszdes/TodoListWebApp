{"ast":null,"code":"import { call, put, select, takeEvery } from \"redux-saga/effects\";\nimport { GET_USER_PHOTO, GET_USER_PHOTO_SUCCEED } from \"../../redux/constants\";\nimport httpRequest from \"../httpConfig\";\n\nfunction* getUserPhotoWorker() {\n  const id = yield select(x => x.auth.id);\n  const httpConfig = {\n    method: 'GET',\n    url: `api/user/${id}`\n  };\n  const response = yield call(() => httpRequest(httpConfig));\n  yield put({\n    type: GET_USER_PHOTO_SUCCEED,\n    payload: response.data\n  });\n}\n\nexport function* watchGetUserPhoto() {\n  yield takeEvery(GET_USER_PHOTO, getUserPhotoWorker);\n}","map":{"version":3,"sources":["C:/Users/Vladislav Avanesov/RiderProjects/TodoListWebApp/src/TodoListWebApp/ClientApp/src/sagas/UserSagas/GetUserPhoto.ts"],"names":["call","put","select","takeEvery","GET_USER_PHOTO","GET_USER_PHOTO_SUCCEED","httpRequest","getUserPhotoWorker","id","x","auth","httpConfig","method","url","response","type","payload","data","watchGetUserPhoto"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA2C,oBAA3C;AAEA,SACIC,cADJ,EACoBC,sBADpB,QAEO,uBAFP;AAGA,OAAOC,WAAP,MAAwB,eAAxB;;AAIA,UAAUC,kBAAV,GAA+B;AAE3B,QAAMC,EAAU,GAAG,MAAMN,MAAM,CAAEO,CAAD,IAAmBA,CAAC,CAACC,IAAF,CAAOF,EAA3B,CAA/B;AAEA,QAAMG,UAA8B,GAAG;AACnCC,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,GAAG,EAAG,YAAWL,EAAG;AAFe,GAAvC;AAKA,QAAMM,QAAQ,GAAG,MAAMd,IAAI,CAAC,MAAMM,WAAW,CAACK,UAAD,CAAlB,CAA3B;AACA,QAAMV,GAAG,CAAC;AAACc,IAAAA,IAAI,EAAEV,sBAAP;AAA+BW,IAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAjD,GAAD,CAAT;AAEH;;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACjC,QAAMf,SAAS,CAACC,cAAD,EAAiBG,kBAAjB,CAAf;AACH","sourcesContent":["import {call, put, select, takeEvery} from \"redux-saga/effects\";\r\nimport {AxiosRequestConfig} from \"axios\";\r\nimport {\r\n    GET_USER_PHOTO, GET_USER_PHOTO_SUCCEED,\r\n} from \"../../redux/constants\";\r\nimport httpRequest from \"../httpConfig\";\r\nimport {IRootState} from \"../../redux/configureStore\";\r\n\r\n\r\nfunction* getUserPhotoWorker() {\r\n\r\n    const id: number = yield select((x: IRootState) => x.auth.id);\r\n\r\n    const httpConfig: AxiosRequestConfig = {\r\n        method: 'GET',\r\n        url: `api/user/${id}`,\r\n    }\r\n\r\n    const response = yield call(() => httpRequest(httpConfig));\r\n    yield put({type: GET_USER_PHOTO_SUCCEED, payload: response.data})\r\n\r\n}\r\n\r\nexport function* watchGetUserPhoto() {\r\n    yield takeEvery(GET_USER_PHOTO, getUserPhotoWorker)\r\n}"]},"metadata":{},"sourceType":"module"}