{"ast":null,"code":"import { ADD_TODO_SUCCEED, COMPLETE_TODO, DELETE_TODO, EDIT_TODO, GET_TODO_LIST_SUCCEED, LOADING } from './constants';\nconst initialState = {\n  items: [],\n  loading: false\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case DELETE_TODO:\n      return { ...state,\n        items: state.items.filter(todo => todo.id !== action.payload)\n      };\n\n    case ADD_TODO_SUCCEED:\n      return { ...state,\n        items: [...state.items, action.payload]\n      };\n\n    case COMPLETE_TODO:\n      {\n        return { ...state,\n          items: state.items.map(x => {\n            if (x.id === action.payload.id) {\n              return { ...x,\n                isComplete: action.payload.isComplete\n              };\n            }\n\n            return x;\n          })\n        };\n      }\n\n    case EDIT_TODO:\n      return { ...state,\n        items: state.items.map(x => {\n          if (x.id === action.payload.id) {\n            return { ...x,\n              text: action.payload.text\n            };\n          }\n\n          return x;\n        })\n      };\n\n    case GET_TODO_LIST_SUCCEED:\n      {\n        return { ...state,\n          items: [...state.items, ...action.payload]\n        };\n      }\n\n    case LOADING:\n      return { ...state,\n        loading: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/Vladislav Avanesov/RiderProjects/TodoListWebApp/src/TodoListWebApp/ClientApp/src/redux/todos-reducer.ts"],"names":["ADD_TODO_SUCCEED","COMPLETE_TODO","DELETE_TODO","EDIT_TODO","GET_TODO_LIST_SUCCEED","LOADING","initialState","items","loading","state","action","type","filter","todo","id","payload","map","x","isComplete","text"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,SAJJ,EAKIC,qBALJ,EAK2BC,OAL3B,QAMO,aANP;AAUA,MAAMC,YAAyB,GAAG;AAC9BC,EAAAA,KAAK,EAAE,EADuB;AAE9BC,EAAAA,OAAO,EAAE;AAFqB,CAAlC;AAKA,gBAAe,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAoD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,WAAL;AACI,aAAO,EAAC,GAAGO,KAAJ;AAAWF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYK,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACK,OAA9C;AAAlB,OAAP;;AAEJ,SAAKf,gBAAL;AACI,aAAO,EAAC,GAAGS,KAAJ;AAAWF,QAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiBG,MAAM,CAACK,OAAxB;AAAlB,OAAP;;AAEJ,SAAKd,aAAL;AAAoB;AAChB,eAAO,EACH,GAAGQ,KADA;AACOF,UAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYS,GAAZ,CAAgBC,CAAC,IAAI;AAClC,gBAAIA,CAAC,CAACH,EAAF,KAASJ,MAAM,CAACK,OAAP,CAAeD,EAA5B,EAAgC;AAC5B,qBAAO,EAAC,GAAGG,CAAJ;AAAOC,gBAAAA,UAAU,EAAER,MAAM,CAACK,OAAP,CAAeG;AAAlC,eAAP;AACH;;AACD,mBAAOD,CAAP;AACH,WALgB;AADd,SAAP;AAQH;;AAED,SAAKd,SAAL;AACI,aAAO,EACH,GAAGM,KADA;AACOF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYS,GAAZ,CAAgBC,CAAC,IAAI;AAClC,cAAIA,CAAC,CAACH,EAAF,KAASJ,MAAM,CAACK,OAAP,CAAeD,EAA5B,EAAgC;AAC5B,mBAAO,EAAC,GAAGG,CAAJ;AAAOE,cAAAA,IAAI,EAAET,MAAM,CAACK,OAAP,CAAeI;AAA5B,aAAP;AACH;;AACD,iBAAOF,CAAP;AACH,SALgB;AADd,OAAP;;AASJ,SAAKb,qBAAL;AAA4B;AACxB,eAAO,EAAC,GAAGK,KAAJ;AAAWF,UAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiB,GAAGG,MAAM,CAACK,OAA3B;AAAlB,SAAP;AACH;;AAED,SAAKV,OAAL;AACI,aAAO,EAAC,GAAGI,KAAJ;AAAWD,QAAAA,OAAO,EAAEE,MAAM,CAACK;AAA3B,OAAP;;AAGJ;AACI,aAAON,KAAP;AArCR;AAuCH,CAxCD","sourcesContent":["import {\r\n    ADD_TODO_SUCCEED,\r\n    COMPLETE_TODO,\r\n    DELETE_TODO,\r\n    EDIT_TODO,\r\n    GET_TODO_LIST_SUCCEED, LOADING,\r\n} from './constants'\r\nimport {ITodosState} from \"../Components/Interfaces\";\r\nimport {TodosActionTypes} from \"./action\";\r\n\r\nconst initialState: ITodosState = {\r\n    items: [],\r\n    loading: false\r\n}\r\n\r\nexport default (state = initialState, action: TodosActionTypes) => {\r\n    switch (action.type) {\r\n        case DELETE_TODO:\r\n            return {...state, items: state.items.filter(todo => todo.id !== action.payload)}\r\n\r\n        case ADD_TODO_SUCCEED:\r\n            return {...state, items: [...state.items, action.payload]}\r\n\r\n        case COMPLETE_TODO: {\r\n            return {\r\n                ...state, items: state.items.map(x => {\r\n                    if (x.id === action.payload.id) {\r\n                        return {...x, isComplete: action.payload.isComplete}\r\n                    }\r\n                    return x;\r\n                })\r\n            };\r\n        }\r\n\r\n        case EDIT_TODO:\r\n            return {\r\n                ...state, items: state.items.map(x => {\r\n                    if (x.id === action.payload.id) {\r\n                        return {...x, text: action.payload.text}\r\n                    }\r\n                    return x;\r\n                })\r\n            }\r\n\r\n        case GET_TODO_LIST_SUCCEED: {\r\n            return {...state, items: [...state.items, ...action.payload]}\r\n        }\r\n\r\n        case LOADING:\r\n            return {...state, loading: action.payload}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}