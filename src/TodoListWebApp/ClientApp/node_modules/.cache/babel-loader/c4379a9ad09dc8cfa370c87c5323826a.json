{"ast":null,"code":"import { call, put, takeEvery } from 'redux-saga/effects';\nimport { COMPLETE_TODO } from \"../../redux/constants\";\nimport httpRequest from \"../httpConfig\";\n\nfunction* completeTodoWorker(action) {\n  const httpConfig = {\n    method: 'PUT',\n    url: '/api/todoList',\n    data: {\n      id: action.payload.id,\n      text: action.payload.text,\n      isComplete: action.payload.isComplete\n    }\n  };\n  const response = yield call(() => httpRequest(httpConfig));\n\n  if (response.statusCode === 200) {\n    yield put({\n      type: action.payload,\n      payload: action.payload\n    });\n  }\n}\n\nexport function* watchCompleteTodo() {\n  yield takeEvery(COMPLETE_TODO, completeTodoWorker);\n}","map":{"version":3,"sources":["C:/Users/Vladislav Avanesov/RiderProjects/TodoListWebApp/src/TodoListWebApp/ClientApp/src/sagas/TodoListSagas/CompleteTodo.ts"],"names":["call","put","takeEvery","COMPLETE_TODO","httpRequest","completeTodoWorker","action","httpConfig","method","url","data","id","payload","text","isComplete","response","statusCode","type","watchCompleteTodo"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,SAAnB,QAAmC,oBAAnC;AAGA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,UAAUC,kBAAV,CAA6BC,MAA7B,EAAgE;AAE5D,QAAMC,UAA8B,GAAG;AACnCC,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,GAAG,EAAE,eAF8B;AAGnCC,IAAAA,IAAI,EAAE;AACFC,MAAAA,EAAE,EAAEL,MAAM,CAACM,OAAP,CAAeD,EADjB;AAEFE,MAAAA,IAAI,EAAEP,MAAM,CAACM,OAAP,CAAeC,IAFnB;AAGFC,MAAAA,UAAU,EAAER,MAAM,CAACM,OAAP,CAAeE;AAHzB;AAH6B,GAAvC;AAUA,QAAMC,QAAQ,GAAG,MAAMf,IAAI,CAAC,MAAMI,WAAW,CAACG,UAAD,CAAlB,CAA3B;;AACA,MAAIQ,QAAQ,CAACC,UAAT,KAAwB,GAA5B,EAAiC;AAC7B,UAAMf,GAAG,CAAC;AAACgB,MAAAA,IAAI,EAAEX,MAAM,CAACM,OAAd;AAAuBA,MAAAA,OAAO,EAAEN,MAAM,CAACM;AAAvC,KAAD,CAAT;AACH;AACJ;;AAED,OAAO,UAAUM,iBAAV,GAA8B;AACjC,QAAMhB,SAAS,CAACC,aAAD,EAAgBE,kBAAhB,CAAf;AACH","sourcesContent":["import {call, put, takeEvery} from 'redux-saga/effects'\r\nimport {CompleteTodoSucceedAction} from \"../../redux/action\";\r\nimport {AxiosRequestConfig} from \"axios\";\r\nimport {COMPLETE_TODO} from \"../../redux/constants\";\r\nimport httpRequest from \"../httpConfig\";\r\n\r\nfunction* completeTodoWorker(action: CompleteTodoSucceedAction) {\r\n\r\n    const httpConfig: AxiosRequestConfig = {\r\n        method: 'PUT',\r\n        url: '/api/todoList',\r\n        data: {\r\n            id: action.payload.id,\r\n            text: action.payload.text,\r\n            isComplete: action.payload.isComplete\r\n        }\r\n    }\r\n\r\n    const response = yield call(() => httpRequest(httpConfig));\r\n    if (response.statusCode === 200) {\r\n        yield put({type: action.payload, payload: action.payload})\r\n    }\r\n}\r\n\r\nexport function* watchCompleteTodo() {\r\n    yield takeEvery(COMPLETE_TODO, completeTodoWorker)\r\n}"]},"metadata":{},"sourceType":"module"}