"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _FormContext = require("./FormContext");

var _utilities = require("./utilities");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var propTypes = {
  children: _propTypes.func.isRequired,
  config: (0, _propTypes.shape)({}).isRequired,
  initialValues: (0, _propTypes.shape)({}),
  transforms: (0, _propTypes.shape)({})
};

var Validation = /*#__PURE__*/function (_Component) {
  _inherits(Validation, _Component);

  var _super = _createSuper(Validation);

  function Validation() {
    var _this;

    _classCallCheck(this, Validation);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      isRegistered: false
    });

    return _this;
  }

  _createClass(Validation, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          config = _this$props.config,
          initialValues = _this$props.initialValues,
          register = _this$props.register,
          transforms = _this$props.transforms;
      register(config, transforms, Object.keys(config).reduce(function (allFields, field) {
        var value = (0, _utilities.getFirstDefinedValue)(initialValues[field], '');

        if (typeof transforms[field] === 'function') {
          value = transforms[field](value);
        }

        return _objectSpread(_objectSpread({}, allFields), {}, _defineProperty({}, field, value));
      }, {}));
      this.setState({
        isRegistered: true
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.unregister(this.props.config);
      this.setState({
        isRegistered: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          dirty = _this$props2.dirty,
          errors = _this$props2.errors,
          fields = _this$props2.fields,
          isValid = _this$props2.isValid,
          resetAll = _this$props2.resetAll,
          setError = _this$props2.setError,
          setField = _this$props2.setField,
          submit = _this$props2.submit,
          submitted = _this$props2.submitted;
      var validationContext = {
        dirty: dirty,
        errors: errors,
        fields: fields,
        isValid: isValid,
        resetAll: resetAll,
        setError: setError,
        setField: setField,
        submit: submit,
        submitted: submitted
      };
      return this.state.isRegistered ? children(validationContext) : null;
    }
  }]);

  return Validation;
}(_react.Component);

_defineProperty(Validation, "defaultProps", {
  errors: {},
  fields: {},
  initialValues: {},
  transforms: {}
});

_defineProperty(Validation, "propTypes", _objectSpread(_objectSpread({}, propTypes), {}, {
  // FormContext
  dirty: (0, _propTypes.shape)({}).isRequired,
  errors: (0, _propTypes.shape)({}).isRequired,
  fields: (0, _propTypes.shape)({}).isRequired,
  isValid: _propTypes.bool.isRequired,
  register: _propTypes.func.isRequired,
  resetAll: _propTypes.func.isRequired,
  setError: _propTypes.func.isRequired,
  setField: _propTypes.func.isRequired,
  submit: _propTypes.func.isRequired,
  submitted: _propTypes.bool.isRequired,
  unregister: _propTypes.func.isRequired
}));

var ValidationWithFormContext = (0, _FormContext.withFormContext)(Validation);
ValidationWithFormContext.propTypes = propTypes;
var _default = ValidationWithFormContext;
exports["default"] = _default;