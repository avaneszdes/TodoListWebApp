"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _react = require("@testing-library/react");

var _react2 = _interopRequireWildcard(require("react"));

var _ = require("..");

require("regenerator-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ExampleForm = function ExampleForm(_ref) {
  var fields = _ref.fields,
      errors = _ref.errors;
  return /*#__PURE__*/_react2["default"].createElement(_react2.Fragment, null, /*#__PURE__*/_react2["default"].createElement("div", null, /*#__PURE__*/_react2["default"].createElement("label", null, "Username", ' ', /*#__PURE__*/_react2["default"].createElement("input", {
    name: "username",
    value: fields.username,
    onChange: function onChange(f) {
      return f;
    },
    "data-testid": "username"
  })), errors.username && /*#__PURE__*/_react2["default"].createElement("span", {
    "data-testid": "username-error"
  }, errors.username)), /*#__PURE__*/_react2["default"].createElement("div", null, /*#__PURE__*/_react2["default"].createElement("label", null, "Email", ' ', /*#__PURE__*/_react2["default"].createElement("input", {
    name: "email",
    value: fields.email,
    onChange: function onChange(f) {
      return f;
    }
  })), errors.email && /*#__PURE__*/_react2["default"].createElement("span", {
    "data-testid": "email-error"
  }, errors.email)), /*#__PURE__*/_react2["default"].createElement("div", null, /*#__PURE__*/_react2["default"].createElement("label", null, "Delayed", ' ', /*#__PURE__*/_react2["default"].createElement("input", {
    name: "delayed",
    value: fields.delayed,
    onChange: function onChange(f) {
      return f;
    }
  })), errors.delayed && /*#__PURE__*/_react2["default"].createElement("span", {
    "data-testid": "delayed-error"
  }, errors.delayed)), /*#__PURE__*/_react2["default"].createElement("input", {
    type: "reset",
    "data-testid": "reset-button",
    value: "Reset"
  }));
};

var exampleConfig = {
  username: {
    isRequired: 'username required'
  },
  email: {
    isRequired: 'email required',
    isEmail: 'email invalid'
  },
  delayed: {
    isRequired: {
      message: 'delayed invalid',
      validateIf: function validateIf(_ref2) {
        var isDirty = _ref2.isDirty;
        return isDirty;
      }
    }
  }
};
afterEach(_react.cleanup);
describe('<FormValidation />', function () {
  it('runs validation on mount', function () {
    var _render = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: exampleConfig
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        getByTestId = _render.getByTestId;

    expect(getByTestId('username-error')).not.toBeNull();
    expect(getByTestId('username-error').textContent).toBe('username required');
    expect(getByTestId('email-error')).not.toBeNull();
    expect(getByTestId('email-error').textContent).toBe('email required');
  });
  it('reruns validation on every change', function () {
    var _render2 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: exampleConfig
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        getByLabelText = _render2.getByLabelText,
        getByTestId = _render2.getByTestId,
        queryByTestId = _render2.queryByTestId;

    expect(getByTestId('username-error').textContent).toBe('username required');
    expect(getByTestId('email-error').textContent).toBe('email required');
    expect(queryByTestId('delayed-error')).toBeNull();

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'my username'
      }
    });

    _react.fireEvent.change(getByLabelText(/email/i), {
      target: {
        name: 'email',
        value: 'an invalid email'
      }
    });

    _react.fireEvent.change(getByLabelText(/delayed/i), {
      target: {
        name: 'delayed',
        value: 'foo'
      }
    });

    expect(queryByTestId('username-error')).toBeNull();
    expect(getByTestId('email-error').textContent).toBe('email invalid');

    _react.fireEvent.change(getByLabelText(/delayed/i), {
      target: {
        name: 'delayed',
        value: ''
      }
    });

    expect(getByTestId('delayed-error').textContent).toBe('delayed invalid');
  });
  it('calls the onReset prop', function () {
    var resetSpy = jest.fn();

    var _render3 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: exampleConfig,
      onReset: resetSpy
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        getByTestId = _render3.getByTestId;

    _react.fireEvent.click(getByTestId('reset-button'));

    expect(resetSpy).toHaveBeenCalledTimes(1);
  });
  it('calls the onSubmit prop with the correct params', function () {
    var submitSpy = jest.fn();

    var _render4 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: exampleConfig,
      onSubmit: submitSpy
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        container = _render4.container;

    _react.fireEvent.submit(container.querySelector('form'));

    expect(submitSpy).toHaveBeenCalledTimes(1);
    expect(submitSpy).toHaveBeenCalledWith({
      dirty: {
        username: false,
        email: false,
        delayed: false
      },
      errors: {
        username: 'username required',
        email: 'email required',
        delayed: null
      },
      fields: {
        username: '',
        email: '',
        delayed: ''
      },
      isValid: false,
      resetAll: expect.any(Function),
      setError: expect.any(Function),
      setField: expect.any(Function),
      submit: expect.any(Function),
      submitted: true
    });
  });
  it('calls the onUpdate prop with the correct params', function () {
    var updateSpy = jest.fn();

    var _render5 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: exampleConfig,
      onUpdate: updateSpy
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        getByTestId = _render5.getByTestId,
        getByLabelText = _render5.getByLabelText;

    expect(updateSpy).toHaveBeenCalledTimes(1); // register

    expect(updateSpy).toHaveBeenCalledWith({
      dirty: {
        username: false,
        email: false,
        delayed: false
      },
      errors: {
        username: 'username required',
        email: 'email required',
        delayed: null
      },
      fields: {
        username: '',
        email: '',
        delayed: ''
      },
      isValid: false,
      resetAll: expect.any(Function),
      setError: expect.any(Function),
      setField: expect.any(Function),
      submit: expect.any(Function),
      submitted: false
    });

    _react.fireEvent.change(getByLabelText(/email/i), {
      target: {
        name: 'email',
        value: 'test@test.com'
      }
    });

    expect(updateSpy).toHaveBeenCalledTimes(2); // change

    expect(updateSpy).toHaveBeenCalledWith({
      dirty: {
        username: false,
        email: true,
        delayed: false
      },
      errors: {
        username: 'username required',
        email: null,
        delayed: null
      },
      fields: {
        username: '',
        email: 'test@test.com',
        delayed: ''
      },
      isValid: false,
      resetAll: expect.any(Function),
      setError: expect.any(Function),
      setField: expect.any(Function),
      submit: expect.any(Function),
      submitted: false
    });

    _react.fireEvent.click(getByTestId('reset-button'));

    expect(updateSpy).toHaveBeenCalledTimes(3); // reset

    expect(updateSpy).toHaveBeenCalledWith({
      dirty: {
        username: false,
        email: false,
        delayed: false
      },
      errors: {
        username: 'username required',
        email: 'email required',
        delayed: null
      },
      fields: {
        username: '',
        email: '',
        delayed: ''
      },
      isValid: false,
      resetAll: expect.any(Function),
      setError: expect.any(Function),
      setField: expect.any(Function),
      submit: expect.any(Function),
      submitted: false
    });
  });
  it('lets you provide initial values', function () {
    var initialValues = {
      username: 'initial username'
    };

    var _render6 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: exampleConfig,
      initialValues: initialValues
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        getByLabelText = _render6.getByLabelText,
        queryByTestId = _render6.queryByTestId;

    expect(getByLabelText(/username/i).value).toBe('initial username');
    expect(queryByTestId('username-error')).toBeNull();
  });
  it('validates initial values', function () {
    var initialValues = {
      email: 'not an email'
    };

    var _render7 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: exampleConfig,
      initialValues: initialValues
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        getByLabelText = _render7.getByLabelText,
        queryByTestId = _render7.queryByTestId;

    expect(getByLabelText(/email/i).value).toBe('not an email');
    expect(queryByTestId('email-error').textContent).toBe('email invalid');

    _react.fireEvent.change(getByLabelText(/email/i), {
      target: {
        name: 'email',
        value: ''
      }
    });

    expect(queryByTestId('email-error').textContent).toBe('email required');
    expect(getByLabelText(/delayed/i).value).toBe('');
    expect(queryByTestId('delayed-error')).toBeNull();
  });
  it('transforms values (initial & after change)', function () {
    var initialValues = {
      username: 'foo',
      delayed: '77'
    };

    var _render8 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: exampleConfig,
      initialValues: initialValues,
      transforms: {
        username: function username(value) {
          return value.toUpperCase();
        },
        delayed: function delayed(value) {
          return parseInt(value) < 100 ? '0' : '1';
        }
      }
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        getByLabelText = _render8.getByLabelText,
        queryByTestId = _render8.queryByTestId;

    expect(getByLabelText(/username/i).value).toBe('FOO');

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'bar'
      }
    });

    expect(getByLabelText(/username/i).value).toBe('BAR');
    expect(getByLabelText(/delayed/i).value).toBe('0');

    _react.fireEvent.change(getByLabelText(/delayed/i), {
      target: {
        name: 'delayed',
        value: '109'
      }
    });

    expect(getByLabelText(/delayed/i).value).toBe('1');
  });
});
describe('<ValidatorsProvider />', function () {
  it('enables custom validators', function () {
    var customConfig = _objectSpread(_objectSpread({}, exampleConfig), {}, {
      username: _objectSpread(_objectSpread({}, exampleConfig.username), {}, {
        isTheHoff: 'must be the Hoff'
      })
    });

    var hoffValidator = function hoffValidator(config) {
      return function (value) {
        return value !== 'the hoff' ? config.message : null;
      };
    };

    var _render9 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.ValidatorsProvider, {
      validators: {
        isTheHoff: hoffValidator
      }
    }, /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: customConfig
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    }))),
        getByLabelText = _render9.getByLabelText,
        getByTestId = _render9.getByTestId,
        queryByTestId = _render9.queryByTestId;

    expect(getByTestId('username-error').textContent).toBe('username required');

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'the boss'
      }
    });

    expect(getByTestId('username-error').textContent).toBe('must be the Hoff');

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'the hoff'
      }
    });

    expect(queryByTestId('username-error')).toBeNull();
  });
});

var AnotherExampleForm = function AnotherExampleForm(_ref3) {
  var fields = _ref3.fields,
      errors = _ref3.errors;
  return /*#__PURE__*/_react2["default"].createElement(_react2.Fragment, null, /*#__PURE__*/_react2["default"].createElement("div", null, /*#__PURE__*/_react2["default"].createElement("label", null, "Favorite color", ' ', /*#__PURE__*/_react2["default"].createElement("input", {
    name: "color",
    value: fields.color,
    onChange: function onChange(f) {
      return f;
    },
    "data-testid": "color"
  })), errors.color && /*#__PURE__*/_react2["default"].createElement("span", {
    "data-testid": "color-error"
  }, errors.color)), /*#__PURE__*/_react2["default"].createElement("div", null, /*#__PURE__*/_react2["default"].createElement("label", null, "Phone number", ' ', /*#__PURE__*/_react2["default"].createElement("input", {
    name: "phoneNumber",
    value: fields.phoneNumber,
    onChange: function onChange(f) {
      return f;
    },
    "data-testid": "phoneNumber"
  })), errors.phoneNumber && /*#__PURE__*/_react2["default"].createElement("span", {
    "data-testid": "phoneNumber-error"
  }, errors.phoneNumber)));
};

var anotherExampleConfig = {
  color: {
    isRequired: 'color required'
  },
  phoneNumber: {
    isRequired: 'phone number required'
  }
};

var CompoundExampleForm = function CompoundExampleForm(props) {
  return /*#__PURE__*/_react2["default"].createElement(_.Form, {
    onSubmit: props.onSubmit
  }, /*#__PURE__*/_react2["default"].createElement(_.Validation, {
    config: exampleConfig
  }, function (props) {
    return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
  }), props.showAnother && /*#__PURE__*/_react2["default"].createElement(_.Validation, {
    config: anotherExampleConfig
  }, function (props) {
    return /*#__PURE__*/_react2["default"].createElement(AnotherExampleForm, props);
  }));
};

describe('<Form> and <Validation /> side by side', function () {
  it('passes all errors down to all validation components', function () {
    var _render10 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(CompoundExampleForm, {
      showAnother: true
    })),
        getByTestId = _render10.getByTestId;

    expect(getByTestId('username-error')).not.toBeNull();
    expect(getByTestId('email-error')).not.toBeNull();
    expect(getByTestId('color-error')).not.toBeNull();
    expect(getByTestId('phoneNumber-error')).not.toBeNull();
  });
  it('removes fields from the submit arguments if they are removed from the DOM', function () {
    var spy = jest.fn();

    var _render11 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(CompoundExampleForm, {
      onSubmit: spy,
      showAnother: true
    })),
        container = _render11.container,
        getByLabelText = _render11.getByLabelText;

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'selbekk'
      }
    });

    _react.fireEvent.change(getByLabelText(/color/i), {
      target: {
        name: 'color',
        value: 'red'
      }
    });

    _react.fireEvent.submit(container.querySelector('form'));

    expect(spy).toHaveBeenCalledWith(expect.objectContaining({
      fields: expect.objectContaining({
        username: 'selbekk',
        email: '',
        color: 'red',
        phoneNumber: ''
      })
    }));
    spy.mockReset();
    (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(CompoundExampleForm, {
      onSubmit: spy,
      showAnother: false
    }), {
      container: container
    });

    _react.fireEvent.submit(container.querySelector('form'));

    expect(spy).toHaveBeenCalledWith(expect.objectContaining({
      fields: {
        username: 'selbekk',
        email: '',
        delayed: ''
      }
    }));
  });
});
describe('passing in functions as validator configs', function () {
  it('receives errors and fields', function () {
    var functionalConfig = {
      username: {
        isMinLength: function isMinLength(_ref4) {
          var fields = _ref4.fields,
              errors = _ref4.errors;
          return {
            message: "\"".concat(fields.username, "\" is not 5 characters long"),
            length: 5
          };
        }
      },
      email: {
        isEqual: function isEqual(_ref5) {
          var fields = _ref5.fields,
              errors = _ref5.errors;
          return {
            message: "The email must equal the username",
            value: fields.username
          };
        }
      }
    };

    var _render12 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: functionalConfig
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        getByTestId = _render12.getByTestId,
        getByLabelText = _render12.getByLabelText;

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'bork'
      }
    });

    _react.fireEvent.change(getByLabelText(/email/i), {
      target: {
        name: 'email',
        value: 'not the username'
      }
    });

    expect(getByTestId('username-error')).not.toBeNull();
    expect(getByTestId('username-error').textContent).toBe('"bork" is not 5 characters long');
    expect(getByTestId('email-error')).not.toBeNull();
    expect(getByTestId('email-error').textContent).toBe('The email must equal the username');
  });
});
describe('validateIf config property', function () {
  var validateIfConfig = {
    username: {
      isMinLength: function isMinLength(_ref6) {
        var fields = _ref6.fields;
        return {
          message: "\"".concat(fields.username, "\" is not 5 characters long"),
          length: 5
        };
      }
    },
    email: {
      isRequired: {
        validateIf: function validateIf(_ref7) {
          var fields = _ref7.fields;
          return fields.username.length > 5;
        },
        message: 'email is required for long usernames'
      }
    }
  };

  var validateIfWithBooleanConfig = _objectSpread(_objectSpread({}, validateIfConfig), {}, {
    email: {
      isRequired: function isRequired(_ref8) {
        var fields = _ref8.fields;
        return {
          validateIf: fields.username.length > 5,
          message: 'email is required for long usernames'
        };
      }
    }
  });

  it('runs validator if it returns true', function () {
    var _render13 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: validateIfConfig
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        queryByTestId = _render13.queryByTestId,
        getByLabelText = _render13.getByLabelText;

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'borkybork'
      }
    });

    expect(queryByTestId('email-error')).not.toBeNull();
    expect(queryByTestId('email-error').textContent).toBe('email is required for long usernames');
  });
  it('skips validator if it returns false', function () {
    var _render14 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: validateIfConfig
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        queryByTestId = _render14.queryByTestId,
        getByLabelText = _render14.getByLabelText;

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'bork'
      }
    });

    expect(queryByTestId('username-error')).not.toBeNull();
    expect(queryByTestId('username-error').textContent).toBe('"bork" is not 5 characters long');
    expect(queryByTestId('email-error')).toBeNull();
  });
  it('runs validator if it is true', function () {
    var _render15 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: validateIfWithBooleanConfig
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        queryByTestId = _render15.queryByTestId,
        getByLabelText = _render15.getByLabelText;

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'borkybork'
      }
    });

    expect(queryByTestId('email-error')).not.toBeNull();
    expect(queryByTestId('email-error').textContent).toBe('email is required for long usernames');
  });
  it('skips validator if it is false', function () {
    var _render16 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: validateIfWithBooleanConfig
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
    })),
        queryByTestId = _render16.queryByTestId,
        getByLabelText = _render16.getByLabelText;

    _react.fireEvent.change(getByLabelText(/username/i), {
      target: {
        name: 'username',
        value: 'bork'
      }
    });

    expect(queryByTestId('email-error')).toBeNull();
  });
});
describe('resetting', function () {
  it('resets the submitted flag, and all fields and errors', function () {
    var _render17 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
      config: exampleConfig
    }, function (props) {
      return /*#__PURE__*/_react2["default"].createElement(_react2["default"].Fragment, null, /*#__PURE__*/_react2["default"].createElement(ExampleForm, props), /*#__PURE__*/_react2["default"].createElement("button", {
        "data-testid": "reset",
        onClick: props.resetAll
      }, "Reset"));
    })),
        container = _render17.container,
        queryByTestId = _render17.queryByTestId;

    _react.fireEvent.submit(container.querySelector('form'));

    expect(queryByTestId('email-error')).not.toBeNull();

    _react.fireEvent.click(queryByTestId('reset'));

    expect(queryByTestId('email-error')).toBeNull();
  });
});
describe('setting errors', function () {
  it('sets the error programmatically from onSubmit', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var handleSubmit, _render18, container, getByTestId;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            handleSubmit = function handleSubmit(_ref10) {
              var setError = _ref10.setError;
              setError({
                email: "i don't like your email"
              });
            };

            _render18 = (0, _react.render)( /*#__PURE__*/_react2["default"].createElement(_.FormValidation, {
              config: exampleConfig,
              onSubmit: handleSubmit
            }, function (props) {
              return /*#__PURE__*/_react2["default"].createElement(ExampleForm, props);
            })), container = _render18.container, getByTestId = _render18.getByTestId;

            _react.fireEvent.submit(container.querySelector('form'));

            expect(getByTestId('email-error').textContent).toBe("i don't like your email");

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});