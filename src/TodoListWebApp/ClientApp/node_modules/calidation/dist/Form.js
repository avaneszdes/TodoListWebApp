"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _invariant = _interopRequireDefault(require("invariant"));

var _ValidatorsContext = require("./ValidatorsContext");

var _FormContext = require("./FormContext");

var _utilities = require("./utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var propTypes = {
  onChange: _propTypes.func,
  onReset: _propTypes.func,
  onSubmit: _propTypes.func,
  onUpdate: _propTypes.func
};

var Form = /*#__PURE__*/function (_Component) {
  _inherits(Form, _Component);

  var _super = _createSuper(Form);

  function Form() {
    var _this;

    _classCallCheck(this, Form);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(_args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      config: {},
      dirty: {},
      errors: {},
      fields: {},
      submitted: false
    });

    _defineProperty(_assertThisInitialized(_this), "initialValues", {});

    _defineProperty(_assertThisInitialized(_this), "transforms", {});

    _defineProperty(_assertThisInitialized(_this), "getContext", function () {
      var _this$state = _this.state,
          dirty = _this$state.dirty,
          errors = _this$state.errors,
          fields = _this$state.fields,
          submitted = _this$state.submitted;
      return {
        dirty: dirty,
        errors: errors,
        fields: fields,
        isValid: Object.values(errors).every(function (error) {
          return error === null;
        }),
        resetAll: _this.onReset,
        setError: _this.setError,
        setField: _this.setField,
        submit: _this.onSubmit,
        submitted: submitted
      };
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      _this.props.onChange(e);

      var _e$target = e.target,
          checked = _e$target.checked,
          name = _e$target.name,
          type = _e$target.type,
          value = _e$target.value;

      if (e.defaultPrevented || !_this.state.config[name]) {
        return;
      }

      var val = type === 'checkbox' ? checked : value;

      if (typeof _this.transforms[name] === 'function') {
        val = _this.transforms[name](val);
      }

      _this.setField(_defineProperty({}, name, val));
    });

    _defineProperty(_assertThisInitialized(_this), "onReset", function (e) {
      if (e) {
        e.preventDefault();
      }

      _this.setStateInternal(function (_ref) {
        var dirty = _ref.dirty,
            errors = _ref.errors,
            fields = _ref.fields;
        return {
          dirty: Object.keys(dirty).reduce(function (allDirty, field) {
            return _objectSpread(_objectSpread({}, allDirty), {}, _defineProperty({}, field, false));
          }, {}),
          errors: Object.keys(errors).reduce(function (allErrors, field) {
            return _objectSpread(_objectSpread({}, allErrors), {}, _defineProperty({}, field, null));
          }, {}),
          fields: Object.keys(fields).reduce(function (allFields, field) {
            return _objectSpread(_objectSpread({}, allFields), {}, _defineProperty({}, field, _this.initialValues[field]));
          }, {}),
          submitted: false
        };
      }, _this.props.onReset);
    });

    _defineProperty(_assertThisInitialized(_this), "onSubmit", function (e) {
      if (e) {
        e.preventDefault();
      }

      _this.setStateInternal({
        submitted: true
      }, function () {
        _this.props.onSubmit(_this.getContext());
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setError", function (diff) {
      _this.setStateInternal(function (_ref2) {
        var errors = _ref2.errors;
        return {
          errors: _objectSpread(_objectSpread({}, errors), diff)
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setField", function (diff) {
      _this.setStateInternal(function (_ref3) {
        var config = _ref3.config,
            dirty = _ref3.dirty,
            fields = _ref3.fields;

        var allFields = _objectSpread(_objectSpread({}, fields), diff);

        var areDirty = _objectSpread(_objectSpread({}, dirty), Object.keys(diff).reduce(function (allDirty, field) {
          return _objectSpread(_objectSpread({}, allDirty), {}, _defineProperty({}, field, dirty[field] || diff[field] !== _this.initialValues[field]));
        }, {}));

        return {
          dirty: areDirty,
          errors: _this.validate(config, allFields, areDirty),
          fields: allFields
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setStateInternal", function (updater) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

      _this.setState(updater, function () {
        callback.apply(void 0, arguments);

        _this.props.onUpdate(_this.getContext());
      });
    });

    _defineProperty(_assertThisInitialized(_this), "validate", function (allConfig, allFields, areDirty) {
      return Object.entries(allConfig).reduce(function (allErrors, _ref4) {
        var _ref5 = _slicedToArray(_ref4, 2),
            fieldName = _ref5[0],
            fieldValidators = _ref5[1];

        return _objectSpread(_objectSpread({}, allErrors), {}, _defineProperty({}, fieldName, _this.validateField(fieldName, fieldValidators, allFields, allErrors, areDirty)));
      }, {});
    });

    _defineProperty(_assertThisInitialized(_this), "validateField", function (fieldName, fieldValidators, allFields, allErrors, areDirty) {
      var validators = _this.props.validators; // if field is optional and the value doesn't pass the isRequired validator, skip all validators

      if (!fieldValidators.isRequired && validators.isRequired({})(allFields[fieldName]) !== null) {
        return null;
      }

      return Object.entries(fieldValidators).reduce(function (error, _ref6) {
        var _ref7 = _slicedToArray(_ref6, 2),
            validatorName = _ref7[0],
            validatorConfig = _ref7[1];

        if (error) {
          return error;
        }

        var validator = validators[validatorName];
        (0, _invariant["default"])(validator, "You specified a validator that doesn't exist. You " + "specified ".concat(validatorName, ". Available validators: \n\n") + Object.keys(validators).join(',\n'));
        var context = {
          fields: allFields,
          errors: _objectSpread(_objectSpread({}, _this.state.errors), allErrors),
          isDirty: areDirty[fieldName]
        };

        if (typeof validatorConfig === 'function') {
          validatorConfig = validatorConfig(context);
        }

        if (typeof validatorConfig === 'string') {
          validatorConfig = {
            message: validatorConfig
          };
        }

        if (typeof validatorConfig.validateIf === 'function' && !validatorConfig.validateIf(context) || typeof validatorConfig.validateIf === 'boolean' && !validatorConfig.validateIf) {
          return null;
        }

        return validator(validatorConfig, context)(allFields[fieldName]);
      }, null);
    });

    _defineProperty(_assertThisInitialized(_this), "registerSubComponent", function (subComponentConfig, transforms, initialValues) {
      _this.initialValues = _objectSpread(_objectSpread({}, _this.initialValues), initialValues);
      _this.transforms = _objectSpread(_objectSpread({}, _this.transforms), transforms);

      _this.setStateInternal(function (prevState) {
        var config = _objectSpread(_objectSpread({}, prevState.config), subComponentConfig);

        var dirty = _objectSpread(_objectSpread({}, prevState.dirty), Object.keys(subComponentConfig).reduce(function (allDirty, field) {
          return _objectSpread(_objectSpread({}, allDirty), {}, _defineProperty({}, field, false));
        }, {}));

        var fields = _objectSpread(_objectSpread({}, prevState.fields), initialValues);

        return {
          config: config,
          dirty: dirty,
          errors: _this.validate(config, fields, dirty),
          fields: fields
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "unregisterSubComponent", function (subComponentConfig) {
      var keys = Object.keys(subComponentConfig);
      _this.initialValues = (0, _utilities.removeFrom)(_this.initialValues)(keys);
      _this.transforms = (0, _utilities.removeFrom)(_this.transforms)(keys);

      _this.setStateInternal(function (prevState) {
        var config = (0, _utilities.removeFrom)(prevState.config)(keys);
        var dirty = (0, _utilities.removeFrom)(prevState.dirty)(keys);
        var fields = (0, _utilities.removeFrom)(prevState.fields)(keys);
        return {
          config: config,
          dirty: dirty,
          errors: _this.validate(config, fields, dirty),
          fields: fields
        };
      });
    });

    return _this;
  }

  _createClass(Form, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          onSubmit = _this$props.onSubmit,
          onUpdate = _this$props.onUpdate,
          rest = _objectWithoutProperties(_this$props, ["children", "onSubmit", "onUpdate"]);

      var formContext = _objectSpread(_objectSpread({}, this.getContext()), {}, {
        register: this.registerSubComponent,
        unregister: this.unregisterSubComponent
      });

      return /*#__PURE__*/_react["default"].createElement("form", _extends({}, rest, {
        noValidate: true,
        onChange: this.onChange,
        onSubmit: this.onSubmit,
        onReset: this.onReset
      }), /*#__PURE__*/_react["default"].createElement(_FormContext.FormProvider, {
        value: formContext
      }, children));
    }
  }]);

  return Form;
}(_react.Component);

_defineProperty(Form, "defaultProps", {
  onChange: function onChange(e) {},
  onReset: function onReset() {},
  onSubmit: function onSubmit(c) {},
  onUpdate: function onUpdate(c) {}
});

_defineProperty(Form, "propTypes", _objectSpread(_objectSpread({}, propTypes), {}, {
  // ValidatorsContext
  validators: (0, _propTypes.shape)({}).isRequired
}));

var FormWithValidatorsContext = (0, _ValidatorsContext.withValidators)(Form);
FormWithValidatorsContext.propTypes = propTypes;
var _default = FormWithValidatorsContext;
exports["default"] = _default;