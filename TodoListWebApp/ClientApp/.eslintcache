[{"C:\\Users\\Vladislav\\RiderProjects\\todo-list\\src\\index.tsx":"1","C:\\Users\\Vladislav\\RiderProjects\\todo-list\\src\\Components\\TodoItem\\TodoItem.tsx":"2","C:\\Users\\Vladislav\\RiderProjects\\todo-list\\src\\ToDoList.tsx":"3","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\index.tsx":"4","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\TodoItem\\TodoItem.tsx":"5","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\API.ts":"6","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\configureStore.ts":"7","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\app.tsx":"8","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\TodoList\\ToDoList.tsx":"9","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\constants.ts":"10","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\todos-reducer.ts":"11","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\AddTodo.ts":"12","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\action.ts":"13","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\DeleteTodo.ts":"14","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\CompleteTodo.ts":"15","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\EditTodo.ts":"16","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\root.ts":"17","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\Home\\HomePage.tsx":"18","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\Registration\\Registration.tsx":"19","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\Autorization\\SignIn.tsx":"20","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\GetTodoLIst.ts":"21","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\Registration.ts":"22","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\Authorization.ts":"23","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\auth-reducer.ts":"24","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\httpConfig.ts":"25","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\admin-reducer.ts":"26","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\Admin\\AdminPage.tsx":"27","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\AdminSagas\\EditUser.ts":"28","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\AdminSagas\\GetUsers.ts":"29","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\AdminSagas\\DeleteUser.ts":"30"},{"size":191,"mtime":1610396460137,"results":"31","hashOfConfig":"32"},{"size":1053,"mtime":1610451588099,"results":"33","hashOfConfig":"32"},{"size":2553,"mtime":1610452797377,"results":"34","hashOfConfig":"32"},{"size":352,"mtime":1611920759564,"results":"35","hashOfConfig":"36"},{"size":1311,"mtime":1614027874339,"results":"37","hashOfConfig":"36"},{"size":64,"mtime":1611600282569,"results":"38","hashOfConfig":"36"},{"size":797,"mtime":1614197321143,"results":"39","hashOfConfig":"36"},{"size":106,"mtime":1612271000714,"results":"40","hashOfConfig":"36"},{"size":3583,"mtime":1614272341407,"results":"41","hashOfConfig":"36"},{"size":1032,"mtime":1614195860579,"results":"42","hashOfConfig":"36"},{"size":1254,"mtime":1614198543490,"results":"43","hashOfConfig":"36"},{"size":788,"mtime":1612645187188,"results":"44","hashOfConfig":"36"},{"size":2909,"mtime":1614196903754,"results":"45","hashOfConfig":"36"},{"size":801,"mtime":1613928769365,"results":"46","hashOfConfig":"36"},{"size":860,"mtime":1612645779863,"results":"47","hashOfConfig":"36"},{"size":839,"mtime":1612645546667,"results":"48","hashOfConfig":"36"},{"size":890,"mtime":1614197871257,"results":"49","hashOfConfig":"36"},{"size":3268,"mtime":1614272953821,"results":"50","hashOfConfig":"36"},{"size":9513,"mtime":1614074451785,"results":"51","hashOfConfig":"36"},{"size":5620,"mtime":1614198212281,"results":"52","hashOfConfig":"36"},{"size":685,"mtime":1614272998584,"results":"53","hashOfConfig":"36"},{"size":759,"mtime":1612645656717,"results":"54","hashOfConfig":"36"},{"size":830,"mtime":1614272498914,"results":"55","hashOfConfig":"36"},{"size":639,"mtime":1613666380383,"results":"56","hashOfConfig":"36"},{"size":502,"mtime":1612538623282,"results":"57","hashOfConfig":"36"},{"size":798,"mtime":1614197299446,"results":"58","hashOfConfig":"36"},{"size":11516,"mtime":1614239366766,"results":"59","hashOfConfig":"36"},{"size":981,"mtime":1614237637342,"results":"60","hashOfConfig":"36"},{"size":588,"mtime":1614271504454,"results":"61","hashOfConfig":"36"},{"size":772,"mtime":1614197885056,"results":"62","hashOfConfig":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"19kr129",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1h91rll",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"C:\\Users\\Vladislav\\RiderProjects\\todo-list\\src\\index.tsx",[],["131","132"],"C:\\Users\\Vladislav\\RiderProjects\\todo-list\\src\\Components\\TodoItem\\TodoItem.tsx",[],"C:\\Users\\Vladislav\\RiderProjects\\todo-list\\src\\ToDoList.tsx",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\index.tsx",[],["133","134"],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\TodoItem\\TodoItem.tsx",[],["135","136"],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\API.ts",[],["137","138"],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\configureStore.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\app.tsx",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\TodoList\\ToDoList.tsx",["139"],"import React, {useState, useEffect} from 'react';\nimport './ToDoList.css';\nimport TodoItem from \"../TodoItem/TodoItem\";\nimport {Item} from '../Interfaces';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ADD_TODO, EDIT_TODO, COMPLETE_TODO, DELETE_TODO, GET_TODO_LIST} from '../../redux/constants';\nimport {IRootState} from \"../../redux/configureStore\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nexport default function ToDoList() {\n\n    const [value, setValue] = useState(\"\")\n    const [inputHide, setInputHide] = useState(false)\n    const [inputEditHideBtn, setInputEditHideBtn] = useState(true)\n    const todos = useSelector((state: IRootState) => state.todos)\n    const dispatch = useDispatch();\n    const [page, setPage] = useState(1)\n\n    useEffect(() => {\n        dispatch({type: GET_TODO_LIST, payload: []})\n    }, [page])\n\n    const changeHideInput = () => setInputHide(!inputHide);\n    const textChanged = (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value);\n    const addTodos = (text: string) => {\n        if (text !== '') {\n            dispatch({type: ADD_TODO, payload: text})\n            setValue('')\n        }\n        setInputHide(!inputHide);\n    }\n    const deleteItem = (id: number) => dispatch({type: DELETE_TODO, payload: id})\n    const completeTodo = (item: Item) => dispatch({type: COMPLETE_TODO, payload: item})\n    const editItem = (item: Item) => {\n        setInputEditHideBtn(!inputEditHideBtn);\n        if (value) {\n            dispatch({type: EDIT_TODO, payload: {id: item.id, text: value, finished: item.finished}})\n            setValue('')\n        }\n    }\n\n    return (\n        <>\n            <input className={'button-createTodos'}\n                   type=\"button\" value=\"Create todos\"\n                   onClick={() => changeHideInput()}\n            />\n\n            <div hidden={!inputHide}>\n                <input className={'input-todo'}\n                       placeholder=\"Write todos here\"\n                       type=\"text\"\n                       onChange={textChanged}\n                       value={value}\n                />\n                <input className={'buttonCreate'}\n                       value=\"Create\"\n                       type=\"button\"\n                       onClick={() => addTodos(value)}\n                />\n            </div>\n            <div>\n                <input className={'input-edit'}\n                       hidden={inputEditHideBtn}\n                       type='text'\n                       placeholder=\"Write new text here\"\n                       onChange={textChanged}\n                       value={value}\n\n                />\n                <InfiniteScroll\n                    dataLength={todos.length} //This is important field to render the next data\n                    next={() => setPage(page + 1)}\n                    hasMore={true}\n                    loader={<h4>Loading...</h4>}\n                    endMessage={\n                        <p style={{textAlign: 'center'}}>\n                            <b>Yay! You have seen it all</b>\n                        </p>\n                    }\n                >\n                    <h1>{todos.map((x: Item, index: number) =>\n                        <TodoItem key={index}\n                                  item={x}\n                                  completeTodo={completeTodo}\n                                  deleteItem={deleteItem}\n                                  editItem={editItem}\n                        />)}\n                    </h1>\n                </InfiniteScroll>\n            </div>\n\n        </>\n    );\n}\n","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\constants.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\todos-reducer.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\AddTodo.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\action.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\DeleteTodo.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\CompleteTodo.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\EditTodo.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\root.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\Home\\HomePage.tsx",["140","141","142"],"import React from \"react\";\r\nimport SignUp from '../Registration/Registration'\r\nimport SignIn from \"../Autorization/SignIn\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {useState} from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {IRootState} from \"../../redux/configureStore\";\r\nimport {LOG_OUT} from \"../../redux/constants\";\r\nimport jwt_decode, {JwtPayload} from 'jwt-decode'\r\nimport AdminPage from \"../Admin/AdminPage\";\r\nimport {User} from \"../Interfaces\";\r\nimport ToDoList from \"../TodoList/ToDoList\";\r\n\r\nexport default function Home() {\r\n\r\n\r\n    const [isPressed, setPressed] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const pressButton = (isPres: boolean) => {\r\n        setPressed(!isPres)\r\n    }\r\n\r\n    const rootToken: string = useSelector((state: IRootState) => state.auth.token)\r\n    const authenticated = rootToken === null || rootToken === undefined ? false : true\r\n    let role: string = \"\"\r\n    if (authenticated) {\r\n        role = Object.values(jwt_decode<JwtPayload>(rootToken))[0]\r\n        const userProfile = Object.values(JSON.parse(role[1]))\r\n        console.log(userProfile[4])\r\n    }\r\n\r\n    const logOut = () => {\r\n        let token: string = ''\r\n        localStorage.clear()\r\n        dispatch({type: LOG_OUT, token})\r\n    }\r\n\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: 5}}>\r\n\r\n                    <div hidden={true}>\r\n                        <Link to=\"/\">SignUp</Link>\r\n                    </div>\r\n                    \r\n                    {/*<div>*/}\r\n                    {/*    <Link to=\"/admin\">Admin</Link>*/}\r\n                    {/*</div>*/}\r\n\r\n                    <div hidden={true}>\r\n                        <Link to=\"/signIn\">SignIn</Link>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Link to=\"/todoList\">TodoList</Link>\r\n                    </div>\r\n\r\n                    <div hidden={!authenticated}>\r\n                        <Button onClick={logOut} variant=\"outlined\" color=\"primary\">\r\n                            Log Out\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                <hr/>\r\n\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <SignUp pressButton={pressButton} isPres={isPressed}/>\r\n                    </Route>\r\n                    \r\n                    {/*<Route exact path=\"/admin\">*/}\r\n                    {/*    <AdminPage/>*/}\r\n                    {/*</Route>*/}\r\n                    <Route exact path=\"/todoList\">\r\n                        {/*{authenticated ? <ToDoList/> : <Redirect from=\"/todoList\" to=\"/signIn\"/>}*/}\r\n                        <ToDoList/>\r\n                    </Route>\r\n                    <Route path=\"/signIn\">\r\n                        {/*{authenticated === false ? <SignIn/> : <Redirect from=\"/signIn\" to=\"/todoList\"/>}*/}\r\n                        <SignIn/>\r\n                    </Route>\r\n\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\n","C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\Registration\\Registration.tsx",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\Autorization\\SignIn.tsx",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\GetTodoLIst.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\Registration.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\Authorization.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\auth-reducer.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\httpConfig.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\redux\\admin-reducer.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\Components\\Admin\\AdminPage.tsx",["143"],"import React, {useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {DELETE_USER, EDIT_USER, GET_USERS} from \"../../redux/constants\"\r\nimport {IRootState} from \"../../redux/configureStore\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {User} from \"../Interfaces\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 1600,\r\n            backgroundColor: theme.palette.background.paper,\r\n            marginLeft: '10%',\r\n\r\n        },\r\n        form: {\r\n            width: '100%', // Fix IE 11 issue.\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        button: {\r\n            margin: theme.spacing(1),\r\n        },\r\n        item: {\r\n            width: '200px',\r\n            borderWidth: '1px',\r\n            borderColor: 'green',\r\n            borderStyle: 'solid',\r\n            paddingLeft: '20px',\r\n            paddingTop: '14px',\r\n            borderRadius: '10px!important',\r\n            marginLeft: '10px',\r\n        },\r\n        headerItem: {\r\n            width: '218px',\r\n            borderWidth: '2px',\r\n            borderColor: 'black',\r\n            borderStyle: 'solid',\r\n            paddingTop: '5px',\r\n            marginLeft: '10px',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n        },\r\n    }),\r\n);\r\n\r\n\r\nconst yup = require('yup')\r\nrequire('yup-password')(yup)\r\n\r\nconst vScheme = yup.object().shape({\r\n    firstName: yup.string().min(2, 'must be most than 2 symbols').max(30, 'must be lest than 30 symbols').required('required'),\r\n    lastName: yup.string().min(2, 'must be most than 2 symbols').max(30, 'must be lest than 30 symbols').required('required'),\r\n    password: yup.string().password()\r\n        .minSymbols(1, 'password must contain at least 1 symbol')\r\n        .minUppercase(3, 'password must contain at least 3 uppercase letters')\r\n        .minLowercase(3, 'password must contain at least 3 lowercase letters')\r\n        .min(8, 'length must be most than 7')\r\n        .max(30, 'length must be less than 30')\r\n        .required('required'),\r\n    email: yup.string().email('incorrect email address').required('required'),\r\n    role: yup.string().required('required'),\r\n})\r\n\r\nexport default function AdminPage() {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const [open, setOpen] = useState(false)\r\n    const [userId, setUserId] = useState(0 )\r\n    const users = useSelector((x: IRootState) => x.admin)\r\n\r\n    useEffect(() => {\r\n        dispatch({type: GET_USERS, payload: []})\r\n    }, [])\r\n\r\n    const handleClose = () => {\r\n        setOpen(!open)\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id: 0,\r\n            firstName: '',\r\n            lastName: '',\r\n            password: '',\r\n            email: '',\r\n            role: '',\r\n        },\r\n        validationSchema: vScheme,\r\n        onSubmit: (values) => {\r\n            const user = {...values, id: userId}\r\n            handleClose()\r\n            dispatch({type: EDIT_USER, payload: user})\r\n        },\r\n    })\r\n\r\n    const handleClickOpen = (Id: number) => {\r\n        setUserId(Id)\r\n        setOpen(!open)\r\n    }\r\n\r\n    const deleteUser = (user: User) => {\r\n        dispatch({type: DELETE_USER, payload: user.id})\r\n    }\r\n\r\n    return (<>\r\n\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-title\">\r\n                <form className={classes.form} onSubmit={formik.handleSubmit}>\r\n                    <DialogTitle id=\"form-title\">Change user`s data</DialogTitle>\r\n\r\n                    <DialogContent>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id='firstName'\r\n                            label='First Name'\r\n                            type='text'\r\n                            name=\"firstName\"\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.firstName && Boolean(formik.errors.firstName)}\r\n                            value={formik.values.firstName}\r\n                            helperText={formik.touched.firstName && formik.errors.firstName}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id='lastName'\r\n                            label='Last Name'\r\n                            type='text'\r\n                            name=\"lastName\"\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.lastName && Boolean(formik.errors.lastName)}\r\n                            value={formik.values.lastName}\r\n                            helperText={formik.touched.lastName && formik.errors.lastName}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id='password'\r\n                            label='Password'\r\n                            type='password'\r\n                            name=\"password\"\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            value={formik.values.password}\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email Address\"\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            value={formik.values.email}\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id='role'\r\n                            label='Role'\r\n                            type='text'\r\n                            name=\"role\"\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.role && Boolean(formik.errors.role)}\r\n                            value={formik.values.role}\r\n                            helperText={formik.touched.role && formik.errors.role}\r\n                        />\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            type='submit'\r\n                            color='primary'\r\n                            \r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                        <Button\r\n                            onClick={handleClose}\r\n                            color='primary'\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n        <div style={{display: 'flex', marginLeft: '14.5%'} }>\r\n            <div className={classes.headerItem}><h3 style={{marginBlockEnd: '0px',marginBlockStart: '0px'}}>First Name </h3></div>\r\n            <div className={classes.headerItem}><h3 style={{marginBlockEnd: '0px',marginBlockStart: '0px'}}>Last Name </h3></div>\r\n            <div className={classes.headerItem}><h3 style={{marginBlockEnd: '0px',marginBlockStart: '0px'}}>Todos Count</h3></div>\r\n            <div className={classes.headerItem}><h3 style={{marginBlockEnd: '0px',marginBlockStart: '0px'}}>Email </h3></div>\r\n            <div className={classes.headerItem}><h3 style={{marginBlockEnd: '0px',marginBlockStart: '0px'}}>Password</h3></div>\r\n            <div className={classes.headerItem}><h3 style={{marginBlockEnd: '0px',marginBlockStart: '0px'}}>Role </h3></div>\r\n        </div>\r\n            <List dense className={classes.root}>\r\n                {users.map((value: User, index: number) => {\r\n                    return (\r\n                        <ListItem key={index}>\r\n                            <ListItemAvatar>\r\n                                <Avatar\r\n                                    style={{height: '80px', width: '80px'}}\r\n                                    alt={`Avatar n°${value.firstName[0] + value.lastName[0]}`}\r\n                                    src={`/static/images/avatar/${value.firstName}.jpg`}\r\n                                />\r\n                            </ListItemAvatar>\r\n                            <div style={{display: 'flex'}}>\r\n                                <div className={classes.item}>{value.firstName}</div>\r\n                                <div className={classes.item}>{value.lastName}</div>\r\n                                <div className={classes.item}>{value.email}</div>\r\n                                <div className={classes.item}>{value.password}</div>\r\n                                <div className={classes.item}>{value.role}</div>\r\n                                <div className={classes.item}>{value.todosCount}</div>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<DeleteIcon/>}\r\n                                    onClick={() => deleteUser(value)}\r\n                                >\r\n                                    Delete\r\n                                </Button>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<EditIcon/>}\r\n                                    onClick={() => handleClickOpen(value.id)}\r\n                                >\r\n                                    Edit\r\n                                </Button>\r\n\r\n                            </div>\r\n                        </ListItem>\r\n\r\n                    );\r\n                })}\r\n            </List>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n",["144","145"],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\AdminSagas\\EditUser.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\AdminSagas\\GetUsers.ts",[],"C:\\Users\\Vladislav\\RiderProjects\\TodoListWebApp\\TodoListWebApp\\ClientApp\\src\\sagas\\AdminSagas\\DeleteUser.ts",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"146","replacedBy":"150"},{"ruleId":"148","replacedBy":"151"},{"ruleId":"146","replacedBy":"152"},{"ruleId":"148","replacedBy":"153"},{"ruleId":"146","replacedBy":"154"},{"ruleId":"148","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":21,"column":8,"nodeType":"158","endLine":21,"endColumn":14,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":10,"column":5,"nodeType":"162","messageId":"163","endLine":10,"endColumn":13},{"ruleId":"160","severity":1,"message":"164","line":17,"column":8,"nodeType":"162","messageId":"163","endLine":17,"endColumn":17},{"ruleId":"160","severity":1,"message":"165","line":18,"column":9,"nodeType":"162","messageId":"163","endLine":18,"endColumn":13},{"ruleId":"156","severity":1,"message":"157","line":91,"column":8,"nodeType":"158","endLine":91,"endColumn":10,"suggestions":"166"},{"ruleId":"146","replacedBy":"167"},{"ruleId":"148","replacedBy":"168"},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],["169"],["170"],["169"],["170"],["169"],["170"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["171"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'AdminPage' is defined but never used.","'User' is defined but never used.",["172"],["169"],["170"],"no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [dispatch, page]",{"range":"177","text":"178"},"Update the dependencies array to be: [dispatch]",{"range":"179","text":"180"},[857,863],"[dispatch, page]",[3073,3075],"[dispatch]"]